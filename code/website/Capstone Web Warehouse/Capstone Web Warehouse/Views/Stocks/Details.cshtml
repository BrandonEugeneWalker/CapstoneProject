@model Capstone_Database.Model.Stock

@{
    ViewBag.Title = "Details";
}

<h2>Stock Details</h2>

<div>
    <h4>Stock</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            Stock ID:
        </dt>

        <dd>
            @Html.DisplayFor(model => model.stockId)
        </dd>

        <dt>
            Product Name:
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Product.name)
        </dd>

        <dt>
            Product Type:
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Product.type)
        </dd>

        <dt>
            Product Category:
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Product.category)
        </dd>

        <dt>
            Item Condition:
        </dt>

        <dd>
            @Html.DisplayFor(model => model.itemCondition)
        </dd>

    </dl>
</div>
<h2>Stock History</h2>
<div>
    <table class="table" id="stockHist">
        <tr>
            <th onclick="sortTable(0)">
                Rental ID
            </th>
            <th onclick="sortTable(1)">
                Member Name
            </th>
            <th onclick="sortTable(2)">
                Rental Date
            </th>
            <th onclick="sortTable(3)">
                Rental Status
            </th>
            <th onclick="sortTable(4)">
                Shipped By
            </th>
            <th onclick="sortTable(5)">
                Ship Date
            </th>
            <th onclick="sortTable(6)">
                Returned By
            </th>
            <th onclick="sortTable(7)">
                Return Date
            </th>
            <th onclick="sortTable(8)">
                Return Condition
            </th>
            <th onclick="sortTable(9)">
                Ship Condition
            </th>
        </tr>
        @foreach (var item in Model.ItemRentals.OrderByDescending(s => s.rentalDateTime))
        {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.itemRentalId)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Member.name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.rentalDateTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.status)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Employee1.name)
            <br />
            @Html.DisplayFor(modelItem => item.Employee1.employeeId)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.shipDateTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Employee.name)
            <br />
            @Html.DisplayFor(modelItem => item.Employee.employeeId)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.returnDateTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.returnCondition)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.shippedCondition)
        </td>
    </tr>
        }
    </table>
</div>

<script>
    // JavaScript program to illustrate
    // Table sort for both columns and both directions.
    function sortTable(n) {
        var table;
        table = document.getElementById("stockHist");
        var rows, i, x, y, count = 0;
        var switching = true;

        // Order is set as ascending
        var direction = "ascending";

        // Run loop until no switching is needed
        while (switching) {
            switching = false;
            var rows = table.rows;

            //Loop to go through all rows
            for (i = 1; i < (rows.length - 1); i++) {
                var Switch = false;

                // Fetch 2 elements that need to be compared
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];

                // Check the direction of order
                if (direction == "ascending") {

                    // Check if 2 rows need to be switched
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If yes, mark Switch as needed and break loop
                        Switch = true;
                        break;
                    }
                } else if (direction == "descending") {

                    // Check direction
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If yes, mark Switch as needed and break loop
                        Switch = true;
                        break;
                    }
                }
            }
            if (Switch) {
                // Function to switch rows and mark switch as completed
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;

                // Increase count for each switch
                count++;
            } else {
                // Run while loop again for descending order
                if (count == 0 && direction == "ascending") {
                    direction = "descending";
                    switching = true;
                }
            }
        }
    }
</script>
<p>
    @Html.ActionLink("Back to List", "Index")
</p>
