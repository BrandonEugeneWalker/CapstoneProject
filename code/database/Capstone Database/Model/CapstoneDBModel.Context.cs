//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Capstone_Database.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OnlineEntities : DbContext
    {
        public OnlineEntities()
            : base("name=OnlineEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<ItemRental> ItemRentals { get; set; }
        public virtual DbSet<ItemReturn> ItemReturns { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
    
        public virtual int createMemberOrder(Nullable<int> selectedStockId, Nullable<int> selectedMemberId)
        {
            var selectedStockIdParameter = selectedStockId.HasValue ?
                new ObjectParameter("selectedStockId", selectedStockId) :
                new ObjectParameter("selectedStockId", typeof(int));
    
            var selectedMemberIdParameter = selectedMemberId.HasValue ?
                new ObjectParameter("selectedMemberId", selectedMemberId) :
                new ObjectParameter("selectedMemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createMemberOrder", selectedStockIdParameter, selectedMemberIdParameter);
        }
    
        public virtual ObjectResult<retrieveAllProducts_Result> retrieveAllProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveAllProducts_Result>("retrieveAllProducts");
        }
    
        public virtual ObjectResult<retrieveAvailableProducts_Result> retrieveAvailableProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveAvailableProducts_Result>("retrieveAvailableProducts");
        }
    
        public virtual ObjectResult<retrieveProductsWaitingReturn_Result> retrieveProductsWaitingReturn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveProductsWaitingReturn_Result>("retrieveProductsWaitingReturn");
        }
    
        public virtual ObjectResult<retrieveProductsWaitingShipment_Result> retrieveProductsWaitingShipment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveProductsWaitingShipment_Result>("retrieveProductsWaitingShipment");
        }
    
        public virtual ObjectResult<retrieveRentedCount_Result> retrieveRentedCount(string selectedMemberId)
        {
            var selectedMemberIdParameter = selectedMemberId != null ?
                new ObjectParameter("selectedMemberId", selectedMemberId) :
                new ObjectParameter("selectedMemberId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveRentedCount_Result>("retrieveRentedCount", selectedMemberIdParameter);
        }
    
        public virtual ObjectResult<searchProductsName_Result> searchProductsName(string nameSearch)
        {
            var nameSearchParameter = nameSearch != null ?
                new ObjectParameter("nameSearch", nameSearch) :
                new ObjectParameter("nameSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchProductsName_Result>("searchProductsName", nameSearchParameter);
        }
    
        public virtual ObjectResult<searchProductsNameType_Result> searchProductsNameType(string nameSearch, string typeSearch)
        {
            var nameSearchParameter = nameSearch != null ?
                new ObjectParameter("nameSearch", nameSearch) :
                new ObjectParameter("nameSearch", typeof(string));
    
            var typeSearchParameter = typeSearch != null ?
                new ObjectParameter("typeSearch", typeSearch) :
                new ObjectParameter("typeSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchProductsNameType_Result>("searchProductsNameType", nameSearchParameter, typeSearchParameter);
        }
    
        public virtual ObjectResult<searchProductsType_Result> searchProductsType(string typeSearch)
        {
            var typeSearchParameter = typeSearch != null ?
                new ObjectParameter("typeSearch", typeSearch) :
                new ObjectParameter("typeSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchProductsType_Result>("searchProductsType", typeSearchParameter);
        }
    
        public virtual int updateMemberReturn(Nullable<int> selectedRentalId)
        {
            var selectedRentalIdParameter = selectedRentalId.HasValue ?
                new ObjectParameter("selectedRentalId", selectedRentalId) :
                new ObjectParameter("selectedRentalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateMemberReturn", selectedRentalIdParameter);
        }
    
        public virtual int updateRentalShipped(Nullable<int> selectedRentalId)
        {
            var selectedRentalIdParameter = selectedRentalId.HasValue ?
                new ObjectParameter("selectedRentalId", selectedRentalId) :
                new ObjectParameter("selectedRentalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateRentalShipped", selectedRentalIdParameter);
        }
    
        public virtual int updateReturnProcessed(Nullable<int> selectedRentalId)
        {
            var selectedRentalIdParameter = selectedRentalId.HasValue ?
                new ObjectParameter("selectedRentalId", selectedRentalId) :
                new ObjectParameter("selectedRentalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateReturnProcessed", selectedRentalIdParameter);
        }
    
        public virtual int insertEmployee(Nullable<int> id, string pw, Nullable<sbyte> isMan, string epName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var pwParameter = pw != null ?
                new ObjectParameter("pw", pw) :
                new ObjectParameter("pw", typeof(string));
    
            var isManParameter = isMan.HasValue ?
                new ObjectParameter("isMan", isMan) :
                new ObjectParameter("isMan", typeof(sbyte));
    
            var epNameParameter = epName != null ?
                new ObjectParameter("epName", epName) :
                new ObjectParameter("epName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertEmployee", idParameter, pwParameter, isManParameter, epNameParameter);
        }
    
        public virtual ObjectResult<selectEmployeeByIdAndPassword_Result> selectEmployeeByIdAndPassword(Nullable<int> id, string pwd)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectEmployeeByIdAndPassword_Result>("selectEmployeeByIdAndPassword", idParameter, pwdParameter);
        }
    }
}
